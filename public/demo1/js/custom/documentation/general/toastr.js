/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/documentation/general/toastr.js":
/*!*************************************************************************!*\
  !*** ./resources/assets/core/js/custom/documentation/general/toastr.js ***!
  \*************************************************************************/
/***/ (() => {

eval("\n\n// Class definition\nvar KTGeneralToastr = function () {\n  // Private functions\n  var example1 = function example1() {\n    var i = -1;\n    var toastCount = 0;\n    var $toastlast;\n    var getMessage = function getMessage() {\n      var msgs = ['New order has been placed!', 'Are you the six fingered man?', 'Inconceivable!', 'I do not think that means what you think it means.', 'Have fun storming the castle!'];\n      i++;\n      if (i === msgs.length) {\n        i = 0;\n      }\n      return msgs[i];\n    };\n    var getMessageWithClearButton = function getMessageWithClearButton(msg) {\n      msg = msg ? msg : 'Clear itself?';\n      msg += '<br /><br /><button type=\"button\" class=\"btn btn-outline-light btn-sm\">Yes</button>';\n      return msg;\n    };\n    $('#showtoast').on('click', function () {\n      var shortCutFunction = $(\"#toastTypeGroup input:radio:checked\").val();\n      var msg = $('#message').val();\n      var title = $('#title').val() || '';\n      var $showDuration = $('#showDuration');\n      var $hideDuration = $('#hideDuration');\n      var $timeOut = $('#timeOut');\n      var $extendedTimeOut = $('#extendedTimeOut');\n      var $showEasing = $('#showEasing');\n      var $hideEasing = $('#hideEasing');\n      var $showMethod = $('#showMethod');\n      var $hideMethod = $('#hideMethod');\n      var toastIndex = toastCount++;\n      var addClear = $('#addClear').prop('checked');\n      toastr.options = {\n        closeButton: $('#closeButton').prop('checked'),\n        debug: $('#debugInfo').prop('checked'),\n        newestOnTop: $('#newestOnTop').prop('checked'),\n        progressBar: $('#progressBar').prop('checked'),\n        positionClass: $('#positionGroup input:radio:checked').val() || 'toast-top-right',\n        preventDuplicates: $('#preventDuplicates').prop('checked'),\n        onclick: null\n      };\n      if ($('#addBehaviorOnToastClick').prop('checked')) {\n        toastr.options.onclick = function () {\n          alert('You can perform some custom action after a toast goes away');\n        };\n      }\n      if ($showDuration.val().length) {\n        toastr.options.showDuration = $showDuration.val();\n      }\n      if ($hideDuration.val().length) {\n        toastr.options.hideDuration = $hideDuration.val();\n      }\n      if ($timeOut.val().length) {\n        toastr.options.timeOut = addClear ? 0 : $timeOut.val();\n      }\n      if ($extendedTimeOut.val().length) {\n        toastr.options.extendedTimeOut = addClear ? 0 : $extendedTimeOut.val();\n      }\n      if ($showEasing.val().length) {\n        toastr.options.showEasing = $showEasing.val();\n      }\n      if ($hideEasing.val().length) {\n        toastr.options.hideEasing = $hideEasing.val();\n      }\n      if ($showMethod.val().length) {\n        toastr.options.showMethod = $showMethod.val();\n      }\n      if ($hideMethod.val().length) {\n        toastr.options.hideMethod = $hideMethod.val();\n      }\n      if (addClear) {\n        msg = getMessageWithClearButton(msg);\n        toastr.options.tapToDismiss = false;\n      }\n      if (!msg) {\n        msg = getMessage();\n      }\n      $('#toastrOptions').text('toastr.options = ' + JSON.stringify(toastr.options, null, 2) + ';' + '\\n\\ntoastr.' + shortCutFunction + '(\"' + msg + (title ? '\", \"' + title : '') + '\");');\n      var $toast = toastr[shortCutFunction](msg, title); // Wire up an event handler to a button in the toast, if it exists\n      $toastlast = $toast;\n      if (typeof $toast === 'undefined') {\n        return;\n      }\n      if ($toast.find('#okBtn').length) {\n        $toast.delegate('#okBtn', 'click', function () {\n          alert('you clicked me. i was toast #' + toastIndex + '. goodbye!');\n          $toast.remove();\n        });\n      }\n      if ($toast.find('#surpriseBtn').length) {\n        $toast.delegate('#surpriseBtn', 'click', function () {\n          alert('Surprise! you clicked me. i was toast #' + toastIndex + '. You could perform an action here.');\n        });\n      }\n      if ($toast.find('.clear').length) {\n        $toast.delegate('.clear', 'click', function () {\n          toastr.clear($toast, {\n            force: true\n          });\n        });\n      }\n    });\n    function getLastToast() {\n      return $toastlast;\n    }\n    $('#clearlasttoast').on('click', function () {\n      toastr.clear(getLastToast());\n    });\n    $('#cleartoasts').on('click', function () {\n      toastr.clear();\n    });\n  };\n  return {\n    // Public Functions\n    init: function init() {\n      example1();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTGeneralToastr.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/general/toastr.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/documentation/general/toastr.js"]();
/******/ 	
/******/ })()
;
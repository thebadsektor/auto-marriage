/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/documentation/charts/amcharts/stock-charts.js":
/*!***************************************************************************************!*\
  !*** ./resources/assets/core/js/custom/documentation/charts/amcharts/stock-charts.js ***!
  \***************************************************************************************/
/***/ (() => {

eval("\n\n// Class definition\nvar KTGeneralAmChartsStock = function () {\n  // Shared variables\n  var chart;\n  var bodyColor = getComputedStyle(document.documentElement).getPropertyValue('--kt-body-color');\n  var bgColor = getComputedStyle(document.documentElement).getPropertyValue('--kt-body-bg');\n\n  // Private functions\n  var _demo1 = function _demo1() {\n    // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\n    am5.ready(function () {\n      // Create root element\n      // https://www.amcharts.com/docs/v5/getting-started/#Root_element\n      var root = am5.Root[\"new\"](\"kt_amcharts_1\");\n\n      // Set themes\n      // https://www.amcharts.com/docs/v5/concepts/themes/\n      root.setThemes([am5themes_Animated[\"new\"](root)]);\n\n      // Create chart\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/\n      var chart = root.container.children.push(am5xy.XYChart[\"new\"](root, {\n        panX: true,\n        panY: false,\n        wheelX: \"panX\",\n        wheelY: \"zoomX\",\n        layout: root.verticalLayout\n      }));\n      chart.get(\"colors\").set(\"step\", 2);\n\n      // Create axes\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/\n      // when axes are in opposite side, they should be added in reverse order\n      var volumeAxisRenderer = am5xy.AxisRendererY[\"new\"](root, {\n        opposite: true\n      });\n      volumeAxisRenderer.labels.template.setAll({\n        centerY: am5.percent(100),\n        maxPosition: 0.98,\n        fill: bodyColor\n      });\n      var volumeAxis = chart.yAxes.push(am5xy.ValueAxis[\"new\"](root, {\n        renderer: volumeAxisRenderer,\n        height: am5.percent(30),\n        layer: 5\n      }));\n      volumeAxis.axisHeader.set(\"paddingTop\", 10);\n      volumeAxis.axisHeader.children.push(am5.Label[\"new\"](root, {\n        text: \"Volume\",\n        fontWeight: \"bold\",\n        paddingTop: 5,\n        paddingBottom: 5\n      }));\n      var valueAxisRenderer = am5xy.AxisRendererY[\"new\"](root, {\n        opposite: true,\n        pan: \"zoom\"\n      });\n      valueAxisRenderer.labels.template.setAll({\n        centerY: am5.percent(100),\n        maxPosition: 0.98,\n        fill: bodyColor\n      });\n      var valueAxis = chart.yAxes.push(am5xy.ValueAxis[\"new\"](root, {\n        renderer: valueAxisRenderer,\n        height: am5.percent(70),\n        maxDeviation: 1\n      }));\n      valueAxis.axisHeader.children.push(am5.Label[\"new\"](root, {\n        text: \"Value\",\n        fontWeight: \"bold\",\n        paddingBottom: 5,\n        paddingTop: 5\n      }));\n      var dateAxisRenderer = am5xy.AxisRendererX[\"new\"](root, {\n        pan: \"zoom\"\n      });\n      dateAxisRenderer.labels.template.setAll({\n        minPosition: 0.01,\n        maxPosition: 0.99,\n        fill: bodyColor\n      });\n      var dateAxis = chart.xAxes.push(am5xy.DateAxis[\"new\"](root, {\n        groupData: true,\n        maxDeviation: 0.5,\n        baseInterval: {\n          timeUnit: \"day\",\n          count: 1\n        },\n        renderer: dateAxisRenderer\n      }));\n      dateAxis.set(\"tooltip\", am5.Tooltip[\"new\"](root, {}));\n\n      // Add series\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/\n      var valueSeries1 = chart.series.push(am5xy.LineSeries[\"new\"](root, {\n        name: \"XTD\",\n        valueYField: \"price1\",\n        calculateAggregates: true,\n        valueXField: \"date\",\n        xAxis: dateAxis,\n        yAxis: valueAxis,\n        legendValueText: \"{valueY}\"\n      }));\n      var valueTooltip = valueSeries1.set(\"tooltip\", am5.Tooltip[\"new\"](root, {\n        getFillFromSprite: false,\n        getStrokeFromSprite: true,\n        getLabelFillFromSprite: true,\n        autoTextColor: false,\n        pointerOrientation: \"horizontal\",\n        labelText: \"{name}: {valueY} {valueYChangePercent.formatNumber('[#00ff00]+#,###.##|[#ff0000]#,###.##|[#999999]0')}%\"\n      }));\n      valueTooltip.get(\"background\").set(\"fill\", bgColor);\n      var firstColor = chart.get(\"colors\").getIndex(0);\n      var volumeSeries = chart.series.push(am5xy.ColumnSeries[\"new\"](root, {\n        name: \"XTD\",\n        fill: firstColor,\n        stroke: firstColor,\n        valueYField: \"quantity\",\n        valueXField: \"date\",\n        valueYGrouped: \"sum\",\n        xAxis: dateAxis,\n        yAxis: volumeAxis,\n        legendValueText: \"{valueY}\",\n        tooltip: am5.Tooltip[\"new\"](root, {\n          labelText: \"{valueY}\"\n        })\n      }));\n      volumeSeries.columns.template.setAll({\n        strokeWidth: 0.2,\n        strokeOpacity: 1,\n        stroke: am5.color(0xffffff)\n      });\n\n      // Add legend to axis header\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/legend-xy-series/\n      var valueLegend = valueAxis.axisHeader.children.push(am5.Legend[\"new\"](root, {\n        useDefaultMarker: true\n      }));\n      valueLegend.data.setAll([valueSeries1]);\n      var volumeLegend = volumeAxis.axisHeader.children.push(am5.Legend[\"new\"](root, {\n        useDefaultMarker: true\n      }));\n      volumeLegend.data.setAll([volumeSeries]);\n\n      // Stack axes vertically\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Stacked_axes\n      chart.rightAxesContainer.set(\"layout\", root.verticalLayout);\n\n      // Add cursor\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/\n      chart.set(\"cursor\", am5xy.XYCursor[\"new\"](root, {}));\n\n      // Add scrollbar\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/\n      var scrollbar = chart.set(\"scrollbarX\", am5xy.XYChartScrollbar[\"new\"](root, {\n        orientation: \"horizontal\",\n        height: 50\n      }));\n      var sbDateAxis = scrollbar.chart.xAxes.push(am5xy.DateAxis[\"new\"](root, {\n        groupData: true,\n        groupIntervals: [{\n          timeUnit: \"week\",\n          count: 1\n        }],\n        baseInterval: {\n          timeUnit: \"day\",\n          count: 1\n        },\n        renderer: am5xy.AxisRendererX[\"new\"](root, {})\n      }));\n      var sbValueAxis = scrollbar.chart.yAxes.push(am5xy.ValueAxis[\"new\"](root, {\n        renderer: am5xy.AxisRendererY[\"new\"](root, {})\n      }));\n      var sbSeries = scrollbar.chart.series.push(am5xy.LineSeries[\"new\"](root, {\n        valueYField: \"price1\",\n        valueXField: \"date\",\n        xAxis: sbDateAxis,\n        yAxis: sbValueAxis\n      }));\n      sbSeries.fills.template.setAll({\n        visible: true,\n        fillOpacity: 0.3\n      });\n\n      // Generate random data and set on series\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Setting_data\n      var data = [];\n      var price1 = 1000;\n      var quantity = 10000;\n      for (var i = 1; i < 5000; i++) {\n        price1 += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 20);\n        if (price1 < 100) {\n          price1 = 100;\n        }\n        quantity += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 500);\n        if (quantity < 0) {\n          quantity *= -1;\n        }\n        data.push({\n          date: new Date(2010, 0, i).getTime(),\n          price1: price1,\n          quantity: quantity\n        });\n      }\n      valueSeries1.data.setAll(data);\n      volumeSeries.data.setAll(data);\n      sbSeries.data.setAll(data);\n\n      // Make stuff animate on load\n      // https://www.amcharts.com/docs/v5/concepts/animations/\n      chart.appear(1000, 100);\n    }); // end am5.ready()\n  };\n\n  var _demo2 = function _demo2() {\n    // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\n    am5.ready(function () {\n      // Create root element\n      // https://www.amcharts.com/docs/v5/getting-started/#Root_element\n      var root = am5.Root[\"new\"](\"kt_amcharts_2\");\n\n      // Set themes\n      // https://www.amcharts.com/docs/v5/concepts/themes/\n      root.setThemes([am5themes_Animated[\"new\"](root)]);\n\n      // Create chart\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/\n      var chart = root.container.children.push(am5xy.XYChart[\"new\"](root, {\n        panX: true,\n        panY: false,\n        wheelX: \"panX\",\n        wheelY: \"zoomX\",\n        layout: root.verticalLayout\n      }));\n      chart.get(\"colors\").set(\"step\", 2);\n\n      // Create axes\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/\n\n      // Y axis #1\n      var valueAxisRenderer = am5xy.AxisRendererY[\"new\"](root, {\n        opposite: true,\n        pan: \"zoom\"\n      });\n      valueAxisRenderer.labels.template.setAll({\n        centerY: am5.percent(100),\n        maxPosition: 0.98,\n        fill: bodyColor\n      });\n      var valueAxis = chart.yAxes.push(am5xy.ValueAxis[\"new\"](root, {\n        renderer: valueAxisRenderer,\n        maxDeviation: 1,\n        extraMin: 0.2 // gives some extra space\n      }));\n\n      // Y axis #2\n      var volumeAxisRenderer = am5xy.AxisRendererY[\"new\"](root, {\n        opposite: true\n      });\n      volumeAxisRenderer.labels.template.setAll({\n        forceHidden: true,\n        fill: bodyColor\n      });\n      volumeAxisRenderer.grid.template.setAll({\n        forceHidden: true\n      });\n      var volumeAxis = chart.yAxes.push(am5xy.ValueAxis[\"new\"](root, {\n        renderer: volumeAxisRenderer,\n        height: am5.percent(25),\n        layer: 5,\n        centerY: am5.p100,\n        y: am5.p100\n      }));\n      volumeAxis.axisHeader.set(\"paddingTop\", 10);\n\n      // X axis\n      var dateAxisRenderer = am5xy.AxisRendererX[\"new\"](root, {});\n      dateAxisRenderer.labels.template.setAll({\n        minPosition: 0.01,\n        maxPosition: 0.99,\n        fill: bodyColor\n      });\n      var dateAxis = chart.xAxes.push(am5xy.DateAxis[\"new\"](root, {\n        groupData: true,\n        baseInterval: {\n          timeUnit: \"day\",\n          count: 1\n        },\n        renderer: dateAxisRenderer\n      }));\n      dateAxis.set(\"tooltip\", am5.Tooltip[\"new\"](root, {\n        themeTags: [\"axis\"]\n      }));\n\n      // Add series\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/\n      var valueSeries1 = chart.series.push(am5xy.LineSeries[\"new\"](root, {\n        name: \"XTD\",\n        valueYField: \"price1\",\n        calculateAggregates: true,\n        valueYShow: \"valueYChangeSelectionPercent\",\n        valueXField: \"date\",\n        xAxis: dateAxis,\n        yAxis: valueAxis,\n        legendValueText: \"{valueY}\"\n      }));\n      var valueSeries2 = chart.series.push(am5xy.LineSeries[\"new\"](root, {\n        name: \"BTD\",\n        valueYField: \"price2\",\n        calculateAggregates: true,\n        valueYShow: \"valueYChangeSelectionPercent\",\n        valueXField: \"date\",\n        xAxis: dateAxis,\n        yAxis: valueAxis,\n        legendValueText: \"{valueY}\"\n      }));\n\n      // Add series tooltips\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Tooltips\n      var valueTooltip = valueSeries1.set(\"tooltip\", am5.Tooltip[\"new\"](root, {\n        getFillFromSprite: false,\n        getStrokeFromSprite: true,\n        getLabelFillFromSprite: true,\n        autoTextColor: false,\n        pointerOrientation: \"horizontal\",\n        labelText: \"{name}: {valueY} {valueYChangePercent.formatNumber('[#00ff00]+#,###.##|[#ff0000]#,###.##|[#999999]0')}%\"\n      }));\n      valueTooltip.get(\"background\").set(\"fill\", bgColor);\n      var valueTooltip2 = valueSeries2.set(\"tooltip\", am5.Tooltip[\"new\"](root, {\n        getFillFromSprite: false,\n        getStrokeFromSprite: true,\n        getLabelFillFromSprite: true,\n        autoTextColor: false,\n        pointerOrientation: \"horizontal\",\n        labelText: \"{name}: {valueY} {valueYChangePercent.formatNumber('[#00ff00]+#,###.##|[#ff0000]#,###.##|[#999999]0')}%\"\n      }));\n      valueTooltip2.get(\"background\").set(\"fill\", bgColor);\n      var firstColor = chart.get(\"colors\").getIndex(0);\n      var volumeSeries = chart.series.push(am5xy.ColumnSeries[\"new\"](root, {\n        name: \"XTD\",\n        fill: firstColor,\n        stroke: firstColor,\n        valueYField: \"quantity\",\n        valueXField: \"date\",\n        valueYGrouped: \"sum\",\n        xAxis: dateAxis,\n        yAxis: volumeAxis,\n        legendValueText: \"{valueY}\",\n        tooltip: am5.Tooltip[\"new\"](root, {\n          labelText: \"{valueY}\"\n        })\n      }));\n      volumeSeries.columns.template.setAll({\n        width: am5.percent(40),\n        strokeWidth: 0.2,\n        strokeOpacity: 1,\n        stroke: am5.color(0xffffff)\n      });\n\n      // Add legend to axis header\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/legend-xy-series/\n      var legend = chart.plotContainer.children.push(am5.Legend[\"new\"](root, {\n        useDefaultMarker: true\n      }));\n      legend.labels.template.setAll({\n        fill: bodyColor\n      });\n      legend.valueLabels.template.setAll({\n        fill: bodyColor\n      });\n      legend.data.setAll([valueSeries1, valueSeries2]);\n\n      // Add cursor\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/\n      chart.set(\"cursor\", am5xy.XYCursor[\"new\"](root, {}));\n\n      // Add scrollbar\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/\n      var scrollbar = chart.set(\"scrollbarX\", am5xy.XYChartScrollbar[\"new\"](root, {\n        orientation: \"horizontal\",\n        height: 50\n      }));\n      var sbDateAxis = scrollbar.chart.xAxes.push(am5xy.DateAxis[\"new\"](root, {\n        groupData: true,\n        groupIntervals: [{\n          timeUnit: \"week\",\n          count: 1\n        }],\n        baseInterval: {\n          timeUnit: \"day\",\n          count: 1\n        },\n        renderer: am5xy.AxisRendererX[\"new\"](root, {})\n      }));\n      var sbValueAxis = scrollbar.chart.yAxes.push(am5xy.ValueAxis[\"new\"](root, {\n        renderer: am5xy.AxisRendererY[\"new\"](root, {})\n      }));\n      var sbSeries = scrollbar.chart.series.push(am5xy.LineSeries[\"new\"](root, {\n        valueYField: \"price1\",\n        valueXField: \"date\",\n        xAxis: sbDateAxis,\n        yAxis: sbValueAxis\n      }));\n      sbSeries.fills.template.setAll({\n        visible: true,\n        fillOpacity: 0.3\n      });\n\n      // Generate random data and set on series\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Setting_data\n      var data = [];\n      var price1 = 1000;\n      var price2 = 2000;\n      var quantity = 10000;\n      for (var i = 1; i < 5000; i++) {\n        price1 += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 20);\n        price2 += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 20);\n        if (price1 < 100) {\n          price1 = 100;\n        }\n        if (price2 < 100) {\n          price2 = 100;\n        }\n        quantity += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 500);\n        if (quantity < 0) {\n          quantity *= -1;\n        }\n        data.push({\n          date: new Date(2010, 0, i).getTime(),\n          price1: price1,\n          price2: price2,\n          quantity: quantity\n        });\n      }\n      valueSeries1.data.setAll(data);\n      valueSeries2.data.setAll(data);\n      volumeSeries.data.setAll(data);\n      sbSeries.data.setAll(data);\n\n      // Make stuff animate on load\n      // https://www.amcharts.com/docs/v5/concepts/animations/\n      chart.appear(1000, 100);\n    }); // end am5.ready()\n  };\n\n  var _demo3 = function _demo3() {\n    // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\n    am5.ready(function () {\n      // Create root element\n      // https://www.amcharts.com/docs/v5/getting-started/#Root_element\n      var root = am5.Root[\"new\"](\"kt_amcharts_3\");\n\n      // Set themes\n      // https://www.amcharts.com/docs/v5/concepts/themes/\n      root.setThemes([am5themes_Animated[\"new\"](root)]);\n\n      // Create chart\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/\n      var chart = root.container.children.push(am5xy.XYChart[\"new\"](root, {\n        panX: true,\n        panY: false,\n        wheelX: \"panX\",\n        wheelY: \"zoomX\",\n        layout: root.verticalLayout\n      }));\n      chart.get(\"colors\").set(\"step\", 2);\n\n      // Create axes\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/\n      var valueAxisRenderer = am5xy.AxisRendererY[\"new\"](root, {\n        inside: true\n      });\n      valueAxisRenderer.labels.template.setAll({\n        centerY: am5.percent(100),\n        maxPosition: 0.98,\n        fill: bodyColor\n      });\n      var valueAxis = chart.yAxes.push(am5xy.ValueAxis[\"new\"](root, {\n        renderer: valueAxisRenderer,\n        height: am5.percent(70)\n      }));\n      valueAxis.axisHeader.children.push(am5.Label[\"new\"](root, {\n        text: \"Value\",\n        fontWeight: \"bold\",\n        paddingBottom: 5,\n        paddingTop: 5\n      }));\n      var volumeAxisRenderer = am5xy.AxisRendererY[\"new\"](root, {\n        inside: true\n      });\n      volumeAxisRenderer.labels.template.setAll({\n        centerY: am5.percent(100),\n        maxPosition: 0.98,\n        fill: bodyColor\n      });\n      var volumeAxis = chart.yAxes.push(am5xy.ValueAxis[\"new\"](root, {\n        renderer: volumeAxisRenderer,\n        height: am5.percent(30),\n        layer: 5,\n        numberFormat: \"#a\"\n      }));\n      volumeAxis.axisHeader.set(\"paddingTop\", 10);\n      volumeAxis.axisHeader.children.push(am5.Label[\"new\"](root, {\n        text: \"Volume\",\n        fontWeight: \"bold\",\n        paddingTop: 5,\n        paddingBottom: 5\n      }));\n      var dateAxisRenderer = am5xy.AxisRendererX[\"new\"](root, {});\n      dateAxisRenderer.labels.template.setAll({\n        minPosition: 0.01,\n        maxPosition: 0.99,\n        minGridDistance: 40,\n        fill: bodyColor\n      });\n      var dateAxis = chart.xAxes.push(am5xy.DateAxis[\"new\"](root, {\n        groupData: true,\n        //groupCount: 20,\n        baseInterval: {\n          timeUnit: \"day\",\n          count: 1\n        },\n        renderer: dateAxisRenderer\n      }));\n      dateAxis.set(\"tooltip\", am5.Tooltip[\"new\"](root, {}));\n      var color = bgColor;\n\n      // Add series\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/\n      var valueSeries = chart.series.push(am5xy.CandlestickSeries[\"new\"](root, {\n        fill: color,\n        clustered: false,\n        calculateAggregates: true,\n        stroke: color,\n        name: \"MSFT\",\n        xAxis: dateAxis,\n        yAxis: valueAxis,\n        valueYField: \"Close\",\n        openValueYField: \"Open\",\n        lowValueYField: \"Low\",\n        highValueYField: \"High\",\n        valueXField: \"Date\",\n        lowValueYGrouped: \"low\",\n        highValueYGrouped: \"high\",\n        openValueYGrouped: \"open\",\n        valueYGrouped: \"close\",\n        legendValueText: \"open: {openValueY} low: {lowValueY} high: {highValueY} close: {valueY}\",\n        legendRangeValueText: \"{valueYClose}\"\n      }));\n      var valueTooltip = valueSeries.set(\"tooltip\", am5.Tooltip[\"new\"](root, {\n        getFillFromSprite: false,\n        getStrokeFromSprite: true,\n        getLabelFillFromSprite: true,\n        autoTextColor: false,\n        pointerOrientation: \"horizontal\",\n        labelText: \"{name}: {valueY} {valueYChangePreviousPercent.formatNumber('[#00ff00]+#,###.##|[#ff0000]#,###.##|[#999999]0')}%\"\n      }));\n      valueTooltip.get(\"background\").set(\"fill\", bgColor);\n      var firstColor = chart.get(\"colors\").getIndex(0);\n      var volumeSeries = chart.series.push(am5xy.ColumnSeries[\"new\"](root, {\n        name: \"MSFT\",\n        clustered: false,\n        fill: firstColor,\n        stroke: firstColor,\n        valueYField: \"Volume\",\n        valueXField: \"Date\",\n        valueYGrouped: \"sum\",\n        xAxis: dateAxis,\n        yAxis: volumeAxis,\n        legendValueText: \"{valueY}\",\n        tooltip: am5.Tooltip[\"new\"](root, {\n          labelText: \"{valueY}\"\n        })\n      }));\n      volumeSeries.columns.template.setAll({\n        //strokeWidth: 0.5,\n        //strokeOpacity: 1,\n        //stroke: am5.color(0xffffff)\n      });\n\n      // Add legend to axis header\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/legend-xy-series/\n      var valueLegend = valueAxis.axisHeader.children.push(am5.Legend[\"new\"](root, {\n        useDefaultMarker: true\n      }));\n      valueLegend.data.setAll([valueSeries]);\n      var volumeLegend = volumeAxis.axisHeader.children.push(am5.Legend[\"new\"](root, {\n        useDefaultMarker: true\n      }));\n      volumeLegend.data.setAll([volumeSeries]);\n\n      // Stack axes vertically\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Stacked_axes\n      chart.leftAxesContainer.set(\"layout\", root.verticalLayout);\n\n      // Add cursor\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/\n      chart.set(\"cursor\", am5xy.XYCursor[\"new\"](root, {}));\n\n      // Add scrollbar\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/\n      var scrollbar = chart.set(\"scrollbarX\", am5xy.XYChartScrollbar[\"new\"](root, {\n        orientation: \"horizontal\",\n        height: 50\n      }));\n      var sbDateAxis = scrollbar.chart.xAxes.push(am5xy.DateAxis[\"new\"](root, {\n        groupData: true,\n        groupIntervals: [{\n          timeUnit: \"week\",\n          count: 1\n        }],\n        baseInterval: {\n          timeUnit: \"day\",\n          count: 1\n        },\n        renderer: am5xy.AxisRendererX[\"new\"](root, {})\n      }));\n      var sbValueAxis = scrollbar.chart.yAxes.push(am5xy.ValueAxis[\"new\"](root, {\n        renderer: am5xy.AxisRendererY[\"new\"](root, {})\n      }));\n      var sbSeries = scrollbar.chart.series.push(am5xy.LineSeries[\"new\"](root, {\n        valueYField: \"Adj Close\",\n        valueXField: \"Date\",\n        xAxis: sbDateAxis,\n        yAxis: sbValueAxis\n      }));\n      sbSeries.fills.template.setAll({\n        visible: true,\n        fillOpacity: 0.3\n      });\n\n      // Load external data\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Setting_data\n      am5.net.load(\"https://www.amcharts.com/wp-content/uploads/assets/stock/MSFT.csv\").then(function (result) {\n        // Parse loaded data\n        var data = am5.CSVParser.parse(result.response, {\n          delimiter: \",\",\n          reverse: true,\n          skipEmpty: true,\n          useColumnNames: true\n        });\n\n        // Process data (convert dates and values)\n        var processor = am5.DataProcessor[\"new\"](root, {\n          dateFields: [\"Date\"],\n          dateFormat: \"yyyy-MM-dd\",\n          numericFields: [\"Open\", \"High\", \"Low\", \"Close\", \"Adj Close\", \"Volume\"]\n        });\n        processor.processMany(data);\n        console.log(data);\n\n        // Set data\n        valueSeries.data.setAll(data);\n        volumeSeries.data.setAll(data);\n        sbSeries.data.setAll(data);\n      });\n\n      // Make stuff animate on load\n      // https://www.amcharts.com/docs/v5/concepts/animations/\n      chart.appear(1000, 100);\n    }); // end am5.ready()\n  };\n\n  return {\n    // Public Functions\n    init: function init() {\n      _demo1();\n      _demo2();\n      _demo3();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTGeneralAmChartsStock.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/charts/amcharts/stock-charts.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/documentation/charts/amcharts/stock-charts.js"]();
/******/ 	
/******/ })()
;